{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { loginSuccess, loginFailure } from '../../actions/autorisation/Login';\nimport { types } from '../../actions/autorisation/Types';\nimport { typesUser } from '../../actions/user/Username';\nimport rsf from '../../../rsf/rsf';\nimport firebase from 'firebase';\nimport { database } from '../../../rsf/rsf';\nexport function* createPostSaga({\n  email,\n  postDate,\n  postHeadline,\n  postText,\n  postTime\n}) {\n  //  yield put({type: types.LOGIN.REQUEST})\n  try {\n    console.log('IM TRYING', email);\n    const path = email.split('').filter(item => item !== '.').join('');\n    firebase.database().ref(`users/${path}`).set({\n      postDate: postDate,\n      postHeadline: postHeadline,\n      postText: postText,\n      postTime: postTime\n    });\n  } //    yield put(loginSuccess(user));\n  catch (error) {\n    console.log('NONONO');\n    const userRef = database.ref(`${email}`);\n    userRef.child().set({\n      postDate: postDate,\n      postHeadline: postHeadline,\n      postText: postText,\n      postTime: postTime\n    }); //    yield put(loginFailure(error));\n  }\n} //      postDate: postDate,\n//      postHeadline: postHeadline,\n//      postText: postText,\n//      postTime: postTime","map":{"version":3,"sources":["C:/Users/Daniil/ТЕСТОВОЕ/test_app/src/redux/sagas/posts/posts.js"],"names":["call","put","loginSuccess","loginFailure","types","typesUser","rsf","firebase","database","createPostSaga","email","postDate","postHeadline","postText","postTime","console","log","path","split","filter","item","join","ref","set","error","userRef","child"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,kCAA3C;AACA,SAASC,KAAT,QAAsB,kCAAtB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAO,UAAUC,cAAV,CAAyB;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,YAAlB;AAAgCC,EAAAA,QAAhC;AAA0CC,EAAAA;AAA1C,CAAzB,EAA8E;AACrF;AACE,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBN,KAAzB;AACE,UAAMO,IAAI,GAAGP,KAAK,CAACQ,KAAN,CAAY,EAAZ,EAAgBC,MAAhB,CAAuBC,IAAI,IAAIA,IAAI,KAAK,GAAxC,EAA6CC,IAA7C,CAAkD,EAAlD,CAAb;AAEAd,IAAAA,QAAQ,CAACC,QAAT,GAAoBc,GAApB,CAAyB,SAAQL,IAAK,EAAtC,EAAyCM,GAAzC,CAA6C;AAC3CZ,MAAAA,QAAQ,EAAEA,QADiC;AAE3CC,MAAAA,YAAY,EAAEA,YAF6B;AAG3CC,MAAAA,QAAQ,EAAEA,QAHiC;AAI3CC,MAAAA,QAAQ,EAAEA;AAJiC,KAA7C;AAMD,GAVH,CAWF;AAEE,SAAMU,KAAN,EAAa;AACXT,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,UAAMS,OAAO,GAAGjB,QAAQ,CAACc,GAAT,CAAc,GAAEZ,KAAM,EAAtB,CAAhB;AACAe,IAAAA,OAAO,CAACC,KAAR,GAAgBH,GAAhB,CAAoB;AAClBZ,MAAAA,QAAQ,EAAEA,QADQ;AAElBC,MAAAA,YAAY,EAAEA,YAFI;AAGlBC,MAAAA,QAAQ,EAAEA,QAHQ;AAIlBC,MAAAA,QAAQ,EAAEA;AAJQ,KAApB,EAHW,CASf;AACG;AACF,C,CAED;AACA;AACA;AACA","sourcesContent":["import { call, put } from 'redux-saga/effects'\nimport { loginSuccess, loginFailure } from '../../actions/autorisation/Login'\nimport { types } from '../../actions/autorisation/Types'\nimport { typesUser } from '../../actions/user/Username'\nimport rsf from '../../../rsf/rsf'\nimport firebase from 'firebase'\nimport { database } from '../../../rsf/rsf'\n\nexport function* createPostSaga({email, postDate, postHeadline, postText, postTime}) {\n//  yield put({type: types.LOGIN.REQUEST})\n  try {\n    console.log('IM TRYING', email)\n      const path = email.split('').filter(item => item !== '.').join('');\n      \n      firebase.database().ref(`users/${path}`).set({\n        postDate: postDate,\n        postHeadline: postHeadline,\n        postText: postText,\n        postTime: postTime\n      });\n    }\n//    yield put(loginSuccess(user));\n  \n  catch(error) {\n    console.log('NONONO')\n    const userRef = database.ref(`${email}`);\n    userRef.child().set({\n      postDate: postDate,\n      postHeadline: postHeadline,\n      postText: postText,\n      postTime: postTime\n    });\n//    yield put(loginFailure(error));\n  }\n}\n\n//      postDate: postDate,\n//      postHeadline: postHeadline,\n//      postText: postText,\n//      postTime: postTime"]},"metadata":{},"sourceType":"module"}