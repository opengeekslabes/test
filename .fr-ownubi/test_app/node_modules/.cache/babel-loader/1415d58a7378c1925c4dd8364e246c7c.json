{"ast":null,"code":"import { all, call, fork, take, takeEvery, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\nimport { types } from '../actions/autorisation/Types';\nimport { typesPosts } from '../actions/posts/posts';\nimport rsf from '../../rsf/rsf';\nimport { history } from '../../components/App';\nimport { loginSaga } from './autorisation/Login';\nimport { loginGoogleSaga } from './autorisation/LogInGoogle';\nimport { createUserSaga, addUser } from './autorisation/SignUp';\nimport { logoutSaga } from './autorisation/Logout';\nimport { sendPasswordResetEmailSaga } from './autorisation/ResetPassword';\nimport { loginFacebookSaga } from './autorisation/LogInFB';\nimport { createPostSaga } from './posts/posts';\n\nfunction* loginStatusWatcher() {\n  const channel = yield call(rsf.auth.channel);\n\n  while (true) {\n    const {\n      user\n    } = yield take(channel);\n\n    if (user) {\n      console.log(user);\n      yield put({\n        type: typesUser.USERNAME.SUCCESS,\n        name: user.displayName\n      });\n      history.replace('profile');\n    } else {\n      history.replace('/');\n    }\n  }\n}\n\nexport function* loginRootSaga() {\n  yield fork(loginStatusWatcher);\n  yield all([takeEvery(types.LOGIN.ACTION, loginSaga), takeEvery(types.LOGINGOOGLE.REQUEST, loginGoogleSaga), takeEvery(types.SIGNUP.REQUEST, createUserSaga), takeEvery(types.SIGNUP.SUCCESS, addUser), takeEvery(types.LOGOUT.REQUEST, logoutSaga), takeEvery(types.RESET.REQUEST, sendPasswordResetEmailSaga), takeEvery(types.LOGINFB.REQUEST, loginFacebookSaga), takeEvery(typesUser.USERNAME.REQUEST, getUserSaga)]);\n}\nexport function* rootSaga() {\n  yield all([fork(loginRootSaga)]);\n}","map":{"version":3,"sources":["C:/Users/Daniil/ТЕСТОВОЕ/test_app/src/redux/sagas/index.js"],"names":["all","call","fork","take","takeEvery","put","firebase","types","typesPosts","rsf","history","loginSaga","loginGoogleSaga","createUserSaga","addUser","logoutSaga","sendPasswordResetEmailSaga","loginFacebookSaga","createPostSaga","loginStatusWatcher","channel","auth","user","console","log","type","typesUser","USERNAME","SUCCESS","name","displayName","replace","loginRootSaga","LOGIN","ACTION","LOGINGOOGLE","REQUEST","SIGNUP","LOGOUT","RESET","LOGINFB","getUserSaga","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,uBAAxC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,cAAT,QAA+B,eAA/B;;AAEA,UAAUC,kBAAV,GAA+B;AAC7B,QAAMC,OAAO,GAAG,MAAMnB,IAAI,CAACQ,GAAG,CAACY,IAAJ,CAASD,OAAV,CAA1B;;AACA,SAAO,IAAP,EAAa;AACX,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAMnB,IAAI,CAACiB,OAAD,CAA3B;;AACA,QAAIE,IAAJ,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,YAAMjB,GAAG,CAAC;AAACoB,QAAAA,IAAI,EAAEC,SAAS,CAACC,QAAV,CAAmBC,OAA1B;AAAmCC,QAAAA,IAAI,EAAEP,IAAI,CAACQ;AAA9C,OAAD,CAAT;AACApB,MAAAA,OAAO,CAACqB,OAAR,CAAgB,SAAhB;AACD,KAJD,MAIO;AACLrB,MAAAA,OAAO,CAACqB,OAAR,CAAgB,GAAhB;AACD;AACF;AACF;;AAED,OAAO,UAAUC,aAAV,GAA0B;AAC/B,QAAM9B,IAAI,CAACiB,kBAAD,CAAV;AACA,QAAMnB,GAAG,CAAC,CACRI,SAAS,CAACG,KAAK,CAAC0B,KAAN,CAAYC,MAAb,EAAqBvB,SAArB,CADD,EAERP,SAAS,CAACG,KAAK,CAAC4B,WAAN,CAAkBC,OAAnB,EAA4BxB,eAA5B,CAFD,EAGRR,SAAS,CAACG,KAAK,CAAC8B,MAAN,CAAaD,OAAd,EAAuBvB,cAAvB,CAHD,EAIRT,SAAS,CAACG,KAAK,CAAC8B,MAAN,CAAaT,OAAd,EAAuBd,OAAvB,CAJD,EAKRV,SAAS,CAACG,KAAK,CAAC+B,MAAN,CAAaF,OAAd,EAAuBrB,UAAvB,CALD,EAMRX,SAAS,CAACG,KAAK,CAACgC,KAAN,CAAYH,OAAb,EAAsBpB,0BAAtB,CAND,EAORZ,SAAS,CAACG,KAAK,CAACiC,OAAN,CAAcJ,OAAf,EAAwBnB,iBAAxB,CAPD,EAQRb,SAAS,CAACsB,SAAS,CAACC,QAAV,CAAmBS,OAApB,EAA6BK,WAA7B,CARD,CAAD,CAAT;AAUD;AAED,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAM1C,GAAG,CAAC,CAACE,IAAI,CAAC8B,aAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, take, takeEvery, put } from 'redux-saga/effects'\nimport firebase from 'firebase'\nimport { types } from '../actions/autorisation/Types'\nimport { typesPosts } from '../actions/posts/posts'\nimport rsf from '../../rsf/rsf'\nimport { history } from '../../components/App'\nimport { loginSaga } from './autorisation/Login'\nimport { loginGoogleSaga } from './autorisation/LogInGoogle'\nimport { createUserSaga, addUser } from './autorisation/SignUp'\nimport { logoutSaga } from './autorisation/Logout'\nimport { sendPasswordResetEmailSaga } from './autorisation/ResetPassword'\nimport { loginFacebookSaga } from './autorisation/LogInFB'\nimport { createPostSaga } from './posts/posts'\n\nfunction* loginStatusWatcher() {\n  const channel = yield call(rsf.auth.channel)\n  while (true) {\n    const { user } = yield take(channel)\n    if (user) {\n      console.log(user)\n      yield put({type: typesUser.USERNAME.SUCCESS, name: user.displayName });\n      history.replace('profile')\n    } else {\n      history.replace('/')\n    }\n  }\n}\n\nexport function* loginRootSaga() {\n  yield fork(loginStatusWatcher)\n  yield all([\n    takeEvery(types.LOGIN.ACTION, loginSaga),\n    takeEvery(types.LOGINGOOGLE.REQUEST, loginGoogleSaga),\n    takeEvery(types.SIGNUP.REQUEST, createUserSaga),\n    takeEvery(types.SIGNUP.SUCCESS, addUser),\n    takeEvery(types.LOGOUT.REQUEST, logoutSaga),\n    takeEvery(types.RESET.REQUEST, sendPasswordResetEmailSaga),\n    takeEvery(types.LOGINFB.REQUEST, loginFacebookSaga),\n    takeEvery(typesUser.USERNAME.REQUEST, getUserSaga),\n  ])\n}\n\nexport function* rootSaga() {\n  yield all([fork(loginRootSaga)])\n}"]},"metadata":{},"sourceType":"module"}