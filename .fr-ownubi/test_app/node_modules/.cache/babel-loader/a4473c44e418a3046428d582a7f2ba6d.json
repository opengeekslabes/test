{"ast":null,"code":"import { all, call, fork, take, takeEvery, put } from 'redux-saga/effects';\nimport firebase from 'firebase';\nimport { types } from '../actions/autorisation/Types';\nimport { typesPosts, postGet } from '../actions/posts/posts';\nimport { typesUser } from '../actions/user/Username';\nimport rsf from '../../rsf/rsf';\nimport { history } from '../../components/App';\nimport { loginSaga } from './autorisation/Login';\nimport { loginGoogleSaga } from './autorisation/LogInGoogle';\nimport { createUserSaga, addUser } from './autorisation/SignUp';\nimport { logoutSaga } from './autorisation/Logout';\nimport { sendPasswordResetEmailSaga } from './autorisation/ResetPassword';\nimport { loginFacebookSaga } from './autorisation/LogInFB';\nimport { createPostSaga, getPostsSaga, deletePostSaga } from './posts/posts';\n\nfunction* loginStatusWatcher() {\n  const channel = yield call(rsf.auth.channel);\n\n  while (true) {\n    const {\n      user\n    } = yield take(channel);\n\n    if (user) {\n      console.log(user);\n      yield put({\n        type: typesUser.USERNAME.SUCCESS,\n        email: user.email,\n        name: user.displayName\n      }); //      yield put(postGet(user.email))\n\n      history.replace('profile');\n    } else {\n      history.replace('/');\n    }\n  }\n}\n\nexport function* loginRootSaga() {\n  yield fork(loginStatusWatcher);\n  yield all([takeEvery(types.LOGIN.ACTION, loginSaga), takeEvery(types.LOGINGOOGLE.REQUEST, loginGoogleSaga), takeEvery(types.SIGNUP.REQUEST, createUserSaga), //    takeEvery(types.SIGNUP.SUCCESS, addUser),\n  takeEvery(types.LOGOUT.REQUEST, logoutSaga), takeEvery(types.RESET.REQUEST, sendPasswordResetEmailSaga), takeEvery(types.LOGINFB.REQUEST, loginFacebookSaga), takeEvery(typesPosts.POST.PUSH, createPostSaga), takeEvery(typesPosts.POST.GET, getPostsSaga), takeEvery(typesPosts.POST.REMOVE, deletePostSaga)]);\n}\nexport function* rootSaga() {\n  yield all([fork(loginRootSaga)]);\n}","map":{"version":3,"sources":["C:/Users/Daniil/ТЕСТОВОЕ/test_app/src/redux/sagas/index.js"],"names":["all","call","fork","take","takeEvery","put","firebase","types","typesPosts","postGet","typesUser","rsf","history","loginSaga","loginGoogleSaga","createUserSaga","addUser","logoutSaga","sendPasswordResetEmailSaga","loginFacebookSaga","createPostSaga","getPostsSaga","deletePostSaga","loginStatusWatcher","channel","auth","user","console","log","type","USERNAME","SUCCESS","email","name","displayName","replace","loginRootSaga","LOGIN","ACTION","LOGINGOOGLE","REQUEST","SIGNUP","LOGOUT","RESET","LOGINFB","POST","PUSH","GET","REMOVE","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,SAAhC,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,KAAT,QAAsB,+BAAtB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,wBAApC;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,uBAAxC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,cAAvC,QAA6D,eAA7D;;AAEA,UAAUC,kBAAV,GAA+B;AAC7B,QAAMC,OAAO,GAAG,MAAMvB,IAAI,CAACU,GAAG,CAACc,IAAJ,CAASD,OAAV,CAA1B;;AACA,SAAO,IAAP,EAAa;AACX,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAACqB,OAAD,CAA3B;;AACA,QAAIE,IAAJ,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,YAAMrB,GAAG,CAAC;AAACwB,QAAAA,IAAI,EAAEnB,SAAS,CAACoB,QAAV,CAAmBC,OAA1B;AAAmCC,QAAAA,KAAK,EAAEN,IAAI,CAACM,KAA/C;AAAsDC,QAAAA,IAAI,EAAEP,IAAI,CAACQ;AAAjE,OAAD,CAAT,CAFQ,CAGd;;AACMtB,MAAAA,OAAO,CAACuB,OAAR,CAAgB,SAAhB;AACD,KALD,MAKO;AACLvB,MAAAA,OAAO,CAACuB,OAAR,CAAgB,GAAhB;AACD;AACF;AACF;;AAED,OAAO,UAAUC,aAAV,GAA0B;AAC/B,QAAMlC,IAAI,CAACqB,kBAAD,CAAV;AACA,QAAMvB,GAAG,CAAC,CACRI,SAAS,CAACG,KAAK,CAAC8B,KAAN,CAAYC,MAAb,EAAqBzB,SAArB,CADD,EAERT,SAAS,CAACG,KAAK,CAACgC,WAAN,CAAkBC,OAAnB,EAA4B1B,eAA5B,CAFD,EAGRV,SAAS,CAACG,KAAK,CAACkC,MAAN,CAAaD,OAAd,EAAuBzB,cAAvB,CAHD,EAIZ;AACIX,EAAAA,SAAS,CAACG,KAAK,CAACmC,MAAN,CAAaF,OAAd,EAAuBvB,UAAvB,CALD,EAMRb,SAAS,CAACG,KAAK,CAACoC,KAAN,CAAYH,OAAb,EAAsBtB,0BAAtB,CAND,EAORd,SAAS,CAACG,KAAK,CAACqC,OAAN,CAAcJ,OAAf,EAAwBrB,iBAAxB,CAPD,EAQRf,SAAS,CAACI,UAAU,CAACqC,IAAX,CAAgBC,IAAjB,EAAuB1B,cAAvB,CARD,EASRhB,SAAS,CAACI,UAAU,CAACqC,IAAX,CAAgBE,GAAjB,EAAsB1B,YAAtB,CATD,EAURjB,SAAS,CAACI,UAAU,CAACqC,IAAX,CAAgBG,MAAjB,EAAyB1B,cAAzB,CAVD,CAAD,CAAT;AAYD;AAED,OAAO,UAAU2B,QAAV,GAAqB;AAC1B,QAAMjD,GAAG,CAAC,CAACE,IAAI,CAACkC,aAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, take, takeEvery, put } from 'redux-saga/effects'\nimport firebase from 'firebase'\nimport { types } from '../actions/autorisation/Types'\nimport { typesPosts, postGet } from '../actions/posts/posts'\nimport { typesUser } from '../actions/user/Username'\nimport rsf from '../../rsf/rsf'\nimport { history } from '../../components/App'\nimport { loginSaga } from './autorisation/Login'\nimport { loginGoogleSaga } from './autorisation/LogInGoogle'\nimport { createUserSaga, addUser } from './autorisation/SignUp'\nimport { logoutSaga } from './autorisation/Logout'\nimport { sendPasswordResetEmailSaga } from './autorisation/ResetPassword'\nimport { loginFacebookSaga } from './autorisation/LogInFB'\nimport { createPostSaga, getPostsSaga, deletePostSaga } from './posts/posts'\n\nfunction* loginStatusWatcher() {\n  const channel = yield call(rsf.auth.channel)\n  while (true) {\n    const { user } = yield take(channel)\n    if (user) {\n      console.log(user)\n      yield put({type: typesUser.USERNAME.SUCCESS, email: user.email, name: user.displayName });\n//      yield put(postGet(user.email))\n      history.replace('profile')\n    } else {\n      history.replace('/')\n    }\n  }\n}\n\nexport function* loginRootSaga() {\n  yield fork(loginStatusWatcher)\n  yield all([\n    takeEvery(types.LOGIN.ACTION, loginSaga),\n    takeEvery(types.LOGINGOOGLE.REQUEST, loginGoogleSaga),\n    takeEvery(types.SIGNUP.REQUEST, createUserSaga),\n//    takeEvery(types.SIGNUP.SUCCESS, addUser),\n    takeEvery(types.LOGOUT.REQUEST, logoutSaga),\n    takeEvery(types.RESET.REQUEST, sendPasswordResetEmailSaga),\n    takeEvery(types.LOGINFB.REQUEST, loginFacebookSaga),\n    takeEvery(typesPosts.POST.PUSH, createPostSaga),\n    takeEvery(typesPosts.POST.GET, getPostsSaga),\n    takeEvery(typesPosts.POST.REMOVE, deletePostSaga),\n  ])\n}\n\nexport function* rootSaga() {\n  yield all([fork(loginRootSaga)])\n}"]},"metadata":{},"sourceType":"module"}